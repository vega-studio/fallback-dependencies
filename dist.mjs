#!/usr/bin/env bun
// @bun
import{createRequire as o0} from"node:module";var l0=Object.create;var{defineProperty:cq,getPrototypeOf:p0,getOwnPropertyNames:c0}=Object;var f0=Object.prototype.hasOwnProperty;var d0=(q,J,O)=>{O=q!=null?l0(p0(q)):{};const y=J||!q||!q.__esModule?cq(O,"default",{value:q,enumerable:!0}):O;for(let z of c0(q))if(!f0.call(y,z))cq(y,z,{get:()=>q[z],enumerable:!0});return y};var _=(q,J)=>()=>(J||q((J={exports:{}}).exports,J),J.exports);var I=o0(import.meta.url);var M=_((a0)=>{a0.fromCallback=function(q){return Object.defineProperty(function(...J){if(typeof J[J.length-1]==="function")q.apply(this,J);else return new Promise((O,y)=>{J.push((z,K)=>z!=null?y(z):O(K)),q.apply(this,J)})},"name",{value:q.name})};a0.fromPromise=function(q){return Object.defineProperty(function(...J){const O=J[J.length-1];if(typeof O!=="function")return q.apply(this,J);else J.pop(),q.apply(this,J).then((y)=>O(null,y),O)},"name",{value:q.name})}});var dq=_((Cy,fq)=>{var q6=function(q){if(o.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./))J(q);if(!q.lutimes)O(q);if(q.chown=K(q.chown),q.fchown=K(q.fchown),q.lchown=K(q.lchown),q.chmod=y(q.chmod),q.fchmod=y(q.fchmod),q.lchmod=y(q.lchmod),q.chownSync=X(q.chownSync),q.fchownSync=X(q.fchownSync),q.lchownSync=X(q.lchownSync),q.chmodSync=z(q.chmodSync),q.fchmodSync=z(q.fchmodSync),q.lchmodSync=z(q.lchmodSync),q.stat=V(q.stat),q.fstat=V(q.fstat),q.lstat=V(q.lstat),q.statSync=B(q.statSync),q.fstatSync=B(q.fstatSync),q.lstatSync=B(q.lstatSync),q.chmod&&!q.lchmod)q.lchmod=function(Z,G,U){if(U)process.nextTick(U)},q.lchmodSync=function(){};if(q.chown&&!q.lchown)q.lchown=function(Z,G,U,H){if(H)process.nextTick(H)},q.lchownSync=function(){};if(s0==="win32")q.rename=typeof q.rename!=="function"?q.rename:function(Z){function G(U,H,Y){var L=Date.now(),j=0;Z(U,H,function Q(i){if(i&&(i.code==="EACCES"||i.code==="EPERM"||i.code==="EBUSY")&&Date.now()-L<60000){if(setTimeout(function(){q.stat(H,function(S,Zq){if(S&&S.code==="ENOENT")Z(U,H,Q);else Y(i)})},j),j<100)j+=10;return}if(Y)Y(i)})}if(Object.setPrototypeOf)Object.setPrototypeOf(G,Z);return G}(q.rename);q.read=typeof q.read!=="function"?q.read:function(Z){function G(U,H,Y,L,j,Q){var i;if(Q&&typeof Q==="function"){var S=0;i=function(Zq,lq,pq){if(Zq&&Zq.code==="EAGAIN"&&S<10)return S++,Z.call(q,U,H,Y,L,j,i);Q.apply(this,arguments)}}return Z.call(q,U,H,Y,L,j,i)}if(Object.setPrototypeOf)Object.setPrototypeOf(G,Z);return G}(q.read),q.readSync=typeof q.readSync!=="function"?q.readSync:function(Z){return function(G,U,H,Y,L){var j=0;while(!0)try{return Z.call(q,G,U,H,Y,L)}catch(Q){if(Q.code==="EAGAIN"&&j<10){j++;continue}throw Q}}}(q.readSync);function J(Z){Z.lchmod=function(G,U,H){Z.open(G,o.O_WRONLY|o.O_SYMLINK,U,function(Y,L){if(Y){if(H)H(Y);return}Z.fchmod(L,U,function(j){Z.close(L,function(Q){if(H)H(j||Q)})})})},Z.lchmodSync=function(G,U){var H=Z.openSync(G,o.O_WRONLY|o.O_SYMLINK,U),Y=!0,L;try{L=Z.fchmodSync(H,U),Y=!1}finally{if(Y)try{Z.closeSync(H)}catch(j){}else Z.closeSync(H)}return L}}function O(Z){if(o.hasOwnProperty("O_SYMLINK")&&Z.futimes)Z.lutimes=function(G,U,H,Y){Z.open(G,o.O_SYMLINK,function(L,j){if(L){if(Y)Y(L);return}Z.futimes(j,U,H,function(Q){Z.close(j,function(i){if(Y)Y(Q||i)})})})},Z.lutimesSync=function(G,U,H){var Y=Z.openSync(G,o.O_SYMLINK),L,j=!0;try{L=Z.futimesSync(Y,U,H),j=!1}finally{if(j)try{Z.closeSync(Y)}catch(Q){}else Z.closeSync(Y)}return L};else if(Z.futimes)Z.lutimes=function(G,U,H,Y){if(Y)process.nextTick(Y)},Z.lutimesSync=function(){}}function y(Z){if(!Z)return Z;return function(G,U,H){return Z.call(q,G,U,function(Y){if(N(Y))Y=null;if(H)H.apply(this,arguments)})}}function z(Z){if(!Z)return Z;return function(G,U){try{return Z.call(q,G,U)}catch(H){if(!N(H))throw H}}}function K(Z){if(!Z)return Z;return function(G,U,H,Y){return Z.call(q,G,U,H,function(L){if(N(L))L=null;if(Y)Y.apply(this,arguments)})}}function X(Z){if(!Z)return Z;return function(G,U,H){try{return Z.call(q,G,U,H)}catch(Y){if(!N(Y))throw Y}}}function V(Z){if(!Z)return Z;return function(G,U,H){if(typeof U==="function")H=U,U=null;function Y(L,j){if(j){if(j.uid<0)j.uid+=4294967296;if(j.gid<0)j.gid+=4294967296}if(H)H.apply(this,arguments)}return U?Z.call(q,G,U,Y):Z.call(q,G,Y)}}function B(Z){if(!Z)return Z;return function(G,U){var H=U?Z.call(q,G,U):Z.call(q,G);if(H){if(H.uid<0)H.uid+=4294967296;if(H.gid<0)H.gid+=4294967296}return H}}function N(Z){if(!Z)return!0;if(Z.code==="ENOSYS")return!0;var G=!process.getuid||process.getuid()!==0;if(G){if(Z.code==="EINVAL"||Z.code==="EPERM")return!0}return!1}},o=import.meta.require("constants"),t0=process.cwd,Lq=null,s0=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){if(!Lq)Lq=t0.call(process);return Lq};try{process.cwd()}catch(q){}if(typeof process.chdir==="function"){if(Iq=process.chdir,process.chdir=function(q){Lq=null,Iq.call(process,q)},Object.setPrototypeOf)Object.setPrototypeOf(process.chdir,Iq)}var Iq;fq.exports=q6});var rq=_((Dy,aq)=>{var J6=function(q){return{ReadStream:J,WriteStream:O};function J(y,z){if(!(this instanceof J))return new J(y,z);oq.call(this);var K=this;this.path=y,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,z=z||{};var X=Object.keys(z);for(var V=0,B=X.length;V<B;V++){var N=X[V];this[N]=z[N]}if(this.encoding)this.setEncoding(this.encoding);if(this.start!==void 0){if(typeof this.start!=="number")throw TypeError("start must be a Number");if(this.end===void 0)this.end=Infinity;else if(typeof this.end!=="number")throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(this.fd!==null){process.nextTick(function(){K._read()});return}q.open(this.path,this.flags,this.mode,function(Z,G){if(Z){K.emit("error",Z),K.readable=!1;return}K.fd=G,K.emit("open",G),K._read()})}function O(y,z){if(!(this instanceof O))return new O(y,z);oq.call(this),this.path=y,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,z=z||{};var K=Object.keys(z);for(var X=0,V=K.length;X<V;X++){var B=K[X];this[B]=z[B]}if(this.start!==void 0){if(typeof this.start!=="number")throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}if(this.busy=!1,this._queue=[],this.fd===null)this._open=q.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush()}},oq=import.meta.require("stream").Stream;aq.exports=J6});var tq=_((Qy,eq)=>{var y6=function(q){if(q===null||typeof q!=="object")return q;if(q instanceof Object)var J={__proto__:O6(q)};else var J=Object.create(null);return Object.getOwnPropertyNames(q).forEach(function(O){Object.defineProperty(J,O,Object.getOwnPropertyDescriptor(q,O))}),J};eq.exports=y6;var O6=Object.getPrototypeOf||function(q){return q.__proto__}});var Jq=_((Py,kq)=>{var Z6=function(){},JJ=function(q,J){Object.defineProperty(q,u,{get:function(){return J}})},Mq=function(q){z6(q),q.gracefulify=Mq,q.createReadStream=lq,q.createWriteStream=pq;var J=q.readFile;q.readFile=O;function O(E,w,A){if(typeof w==="function")A=w,w=null;return k(E,w,A);function k(F,R,P,x){return J(F,R,function(C){if(C&&(C.code==="EMFILE"||C.code==="ENFILE"))qq([k,[F,R,P],C,x||Date.now(),Date.now()]);else if(typeof P==="function")P.apply(this,arguments)})}}var y=q.writeFile;q.writeFile=z;function z(E,w,A,k){if(typeof A==="function")k=A,A=null;return F(E,w,A,k);function F(R,P,x,C,$){return y(R,P,x,function(D){if(D&&(D.code==="EMFILE"||D.code==="ENFILE"))qq([F,[R,P,x,C],D,$||Date.now(),Date.now()]);else if(typeof C==="function")C.apply(this,arguments)})}}var K=q.appendFile;if(K)q.appendFile=X;function X(E,w,A,k){if(typeof A==="function")k=A,A=null;return F(E,w,A,k);function F(R,P,x,C,$){return K(R,P,x,function(D){if(D&&(D.code==="EMFILE"||D.code==="ENFILE"))qq([F,[R,P,x,C],D,$||Date.now(),Date.now()]);else if(typeof C==="function")C.apply(this,arguments)})}}var V=q.copyFile;if(V)q.copyFile=B;function B(E,w,A,k){if(typeof A==="function")k=A,A=0;return F(E,w,A,k);function F(R,P,x,C,$){return V(R,P,x,function(D){if(D&&(D.code==="EMFILE"||D.code==="ENFILE"))qq([F,[R,P,x,C],D,$||Date.now(),Date.now()]);else if(typeof C==="function")C.apply(this,arguments)})}}var N=q.readdir;q.readdir=G;var Z=/^v[0-5]\./;function G(E,w,A){if(typeof w==="function")A=w,w=null;var k=Z.test(process.version)?function R(P,x,C,$){return N(P,F(P,x,C,$))}:function R(P,x,C,$){return N(P,x,F(P,x,C,$))};return k(E,w,A);function F(R,P,x,C){return function($,D){if($&&($.code==="EMFILE"||$.code==="ENFILE"))qq([k,[R,P,x],$,C||Date.now(),Date.now()]);else{if(D&&D.sort)D.sort();if(typeof x==="function")x.call(this,$,D)}}}}if(process.version.substr(0,4)==="v0.8"){var U=K6(q);Q=U.ReadStream,S=U.WriteStream}var H=q.ReadStream;if(H)Q.prototype=Object.create(H.prototype),Q.prototype.open=i;var Y=q.WriteStream;if(Y)S.prototype=Object.create(Y.prototype),S.prototype.open=Zq;Object.defineProperty(q,"ReadStream",{get:function(){return Q},set:function(E){Q=E},enumerable:!0,configurable:!0}),Object.defineProperty(q,"WriteStream",{get:function(){return S},set:function(E){S=E},enumerable:!0,configurable:!0});var L=Q;Object.defineProperty(q,"FileReadStream",{get:function(){return L},set:function(E){L=E},enumerable:!0,configurable:!0});var j=S;Object.defineProperty(q,"FileWriteStream",{get:function(){return j},set:function(E){j=E},enumerable:!0,configurable:!0});function Q(E,w){if(this instanceof Q)return H.apply(this,arguments),this;else return Q.apply(Object.create(Q.prototype),arguments)}function i(){var E=this;Rq(E.path,E.flags,E.mode,function(w,A){if(w){if(E.autoClose)E.destroy();E.emit("error",w)}else E.fd=A,E.emit("open",A),E.read()})}function S(E,w){if(this instanceof S)return Y.apply(this,arguments),this;else return S.apply(Object.create(S.prototype),arguments)}function Zq(){var E=this;Rq(E.path,E.flags,E.mode,function(w,A){if(w)E.destroy(),E.emit("error",w);else E.fd=A,E.emit("open",A)})}function lq(E,w){return new q.ReadStream(E,w)}function pq(E,w){return new q.WriteStream(E,w)}var i0=q.open;q.open=Rq;function Rq(E,w,A,k){if(typeof A==="function")k=A,A=null;return F(E,w,A,k);function F(R,P,x,C,$){return i0(R,P,x,function(D,Ly){if(D&&(D.code==="EMFILE"||D.code==="ENFILE"))qq([F,[R,P,x,C],D,$||Date.now(),Date.now()]);else if(typeof C==="function")C.apply(this,arguments)})}}return q},qq=function(q){t("ENQUEUE",q[0].name,q[1]),W[u].push(q),Tq()},qJ=function(){var q=Date.now();for(var J=0;J<W[u].length;++J)if(W[u][J].length>2)W[u][J][3]=q,W[u][J][4]=q;Tq()},Tq=function(){if(clearTimeout(jq),jq=void 0,W[u].length===0)return;var q=W[u].shift(),J=q[0],O=q[1],y=q[2],z=q[3],K=q[4];if(z===void 0)t("RETRY",J.name,O),J.apply(null,O);else if(Date.now()-z>=60000){t("TIMEOUT",J.name,O);var X=O.pop();if(typeof X==="function")X.call(null,y)}else{var V=Date.now()-K,B=Math.max(K-z,1),N=Math.min(B*1.2,100);if(V>=N)t("RETRY",J.name,O),J.apply(null,O.concat([z]));else W[u].push(q)}if(jq===void 0)jq=setTimeout(Tq,0)},W=import.meta.require("fs"),z6=dq(),K6=rq(),X6=tq(),wq=import.meta.require("util"),u,Bq;if(typeof Symbol==="function"&&typeof Symbol.for==="function")u=Symbol.for("graceful-fs.queue"),Bq=Symbol.for("graceful-fs.previous");else u="___graceful-fs.queue",Bq="___graceful-fs.previous";var t=Z6;if(wq.debuglog)t=wq.debuglog("gfs4");else if(/\bgfs4\b/i.test(process.env.NODE_DEBUG||""))t=function(){var q=wq.format.apply(wq,arguments);q="GFS4: "+q.split(/\n/).join("\nGFS4: "),console.error(q)};if(!W[u]){if(sq=global[u]||[],JJ(W,sq),W.close=function(q){function J(O,y){return q.call(W,O,function(z){if(!z)qJ();if(typeof y==="function")y.apply(this,arguments)})}return Object.defineProperty(J,Bq,{value:q}),J}(W.close),W.closeSync=function(q){function J(O){q.apply(W,arguments),qJ()}return Object.defineProperty(J,Bq,{value:q}),J}(W.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||""))process.on("exit",function(){t(W[u]),import.meta.require("assert").equal(W[u].length,0)})}var sq;if(!global[u])JJ(global,W[u]);kq.exports=Mq(X6(W));if(process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!W.__patched)kq.exports=Mq(W),W.__patched=!0;var jq});var m=_((Fq)=>{var OJ=M().fromCallback,n=Jq(),H6=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((q)=>{return typeof n[q]==="function"});Object.assign(Fq,n);H6.forEach((q)=>{Fq[q]=OJ(n[q])});Fq.exists=function(q,J){if(typeof J==="function")return n.exists(q,J);return new Promise((O)=>{return n.exists(q,O)})};Fq.read=function(q,J,O,y,z,K){if(typeof K==="function")return n.read(q,J,O,y,z,K);return new Promise((X,V)=>{n.read(q,J,O,y,z,(B,N,Z)=>{if(B)return V(B);X({bytesRead:N,buffer:Z})})})};Fq.write=function(q,J,...O){if(typeof O[O.length-1]==="function")return n.write(q,J,...O);return new Promise((y,z)=>{n.write(q,J,...O,(K,X,V)=>{if(K)return z(K);y({bytesWritten:X,buffer:V})})})};Fq.readv=function(q,J,...O){if(typeof O[O.length-1]==="function")return n.readv(q,J,...O);return new Promise((y,z)=>{n.readv(q,J,...O,(K,X,V)=>{if(K)return z(K);y({bytesRead:X,buffers:V})})})};Fq.writev=function(q,J,...O){if(typeof O[O.length-1]==="function")return n.writev(q,J,...O);return new Promise((y,z)=>{n.writev(q,J,...O,(K,X,V)=>{if(K)return z(K);y({bytesWritten:X,buffers:V})})})};if(typeof n.realpath.native==="function")Fq.realpath.native=OJ(n.realpath.native);else process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?","Warning","fs-extra-WARN0003")});var zJ=_((A6,yJ)=>{var _6=import.meta.require("path");A6.checkPath=function q(J){if(process.platform==="win32"){if(/[<>:"|?*]/.test(J.replace(_6.parse(J).root,""))){const y=new Error(`Path contains invalid characters: ${J}`);throw y.code="EINVAL",y}}}});var HJ=_((w6,$q)=>{var KJ=m(),{checkPath:XJ}=zJ(),ZJ=(q)=>{const J={mode:511};if(typeof q==="number")return q;return{...J,...q}.mode};w6.makeDir=async(q,J)=>{return XJ(q),KJ.mkdir(q,{mode:ZJ(J),recursive:!0})};w6.makeDirSync=(q,J)=>{return XJ(q),KJ.mkdirSync(q,{mode:ZJ(J),recursive:!0})}});var p=_((Ny,VJ)=>{var C6=M().fromPromise,{makeDir:D6,makeDirSync:uq}=HJ(),vq=C6(D6);VJ.exports={mkdirs:vq,mkdirsSync:uq,mkdirp:vq,mkdirpSync:uq,ensureDir:vq,ensureDirSync:uq}});var a=_((Ry,YJ)=>{var P6=function(q){return UJ.access(q).then(()=>!0).catch(()=>!1)},Q6=M().fromPromise,UJ=m();YJ.exports={pathExists:Q6(P6),pathExistsSync:UJ.existsSync}});var Sq=_((Iy,GJ)=>{async function x6(q,J,O){const y=await Oq.open(q,"r+");let z=null;try{await Oq.futimes(y,J,O)}finally{try{await Oq.close(y)}catch(K){z=K}}if(z)throw z}var N6=function(q,J,O){const y=Oq.openSync(q,"r+");return Oq.futimesSync(y,J,O),Oq.closeSync(y)},Oq=m(),W6=M().fromPromise;GJ.exports={utimesMillis:W6(x6),utimesMillisSync:N6}});var s=_((My,LJ)=>{var R6=function(q,J,O){const y=O.dereference?(z)=>yq.stat(z,{bigint:!0}):(z)=>yq.lstat(z,{bigint:!0});return Promise.all([y(q),y(J).catch((z)=>{if(z.code==="ENOENT")return null;throw z})]).then(([z,K])=>({srcStat:z,destStat:K}))},I6=function(q,J,O){let y;const z=O.dereference?(X)=>yq.statSync(X,{bigint:!0}):(X)=>yq.lstatSync(X,{bigint:!0}),K=z(q);try{y=z(J)}catch(X){if(X.code==="ENOENT")return{srcStat:K,destStat:null};throw X}return{srcStat:K,destStat:y}};async function M6(q,J,O,y){const{srcStat:z,destStat:K}=await R6(q,J,y);if(K){if(Hq(z,K)){const X=T.basename(q),V=T.basename(J);if(O==="move"&&X!==V&&X.toLowerCase()===V.toLowerCase())return{srcStat:z,destStat:K,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(z.isDirectory()&&!K.isDirectory())throw new Error(`Cannot overwrite non-directory '${J}' with directory '${q}'.`);if(!z.isDirectory()&&K.isDirectory())throw new Error(`Cannot overwrite directory '${J}' with non-directory '${q}'.`)}if(z.isDirectory()&&nq(q,J))throw new Error(Cq(q,J,O));return{srcStat:z,destStat:K}}var T6=function(q,J,O,y){const{srcStat:z,destStat:K}=I6(q,J,y);if(K){if(Hq(z,K)){const X=T.basename(q),V=T.basename(J);if(O==="move"&&X!==V&&X.toLowerCase()===V.toLowerCase())return{srcStat:z,destStat:K,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(z.isDirectory()&&!K.isDirectory())throw new Error(`Cannot overwrite non-directory '${J}' with directory '${q}'.`);if(!z.isDirectory()&&K.isDirectory())throw new Error(`Cannot overwrite directory '${J}' with non-directory '${q}'.`)}if(z.isDirectory()&&nq(q,J))throw new Error(Cq(q,J,O));return{srcStat:z,destStat:K}};async function _J(q,J,O,y){const z=T.resolve(T.dirname(q)),K=T.resolve(T.dirname(O));if(K===z||K===T.parse(K).root)return;let X;try{X=await yq.stat(K,{bigint:!0})}catch(V){if(V.code==="ENOENT")return;throw V}if(Hq(J,X))throw new Error(Cq(q,O,y));return _J(q,J,K,y)}var AJ=function(q,J,O,y){const z=T.resolve(T.dirname(q)),K=T.resolve(T.dirname(O));if(K===z||K===T.parse(K).root)return;let X;try{X=yq.statSync(K,{bigint:!0})}catch(V){if(V.code==="ENOENT")return;throw V}if(Hq(J,X))throw new Error(Cq(q,O,y));return AJ(q,J,K,y)},Hq=function(q,J){return J.ino&&J.dev&&J.ino===q.ino&&J.dev===q.dev},nq=function(q,J){const O=T.resolve(q).split(T.sep).filter((z)=>z),y=T.resolve(J).split(T.sep).filter((z)=>z);return O.every((z,K)=>y[K]===z)},Cq=function(q,J,O){return`Cannot ${O} '${q}' to a subdirectory of itself, '${J}'.`},yq=m(),T=import.meta.require("path"),EJ=M().fromPromise;LJ.exports={checkPaths:EJ(M6),checkPathsSync:T6,checkParentPaths:EJ(_J),checkParentPathsSync:AJ,isSrcSubdir:nq,areIdentical:Hq}});var DJ=_((Ty,CJ)=>{async function u6(q,J,O={}){if(typeof O==="function")O={filter:O};if(O.clobber="clobber"in O?!!O.clobber:!0,O.overwrite="overwrite"in O?!!O.overwrite:O.clobber,O.preserveTimestamps&&process.arch==="ia32")process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0001");const{srcStat:y,destStat:z}=await Uq.checkPaths(q,J,"copy",O);if(await Uq.checkParentPaths(q,y,J,"copy"),!await jJ(q,J,O))return;const X=Vq.dirname(J);if(!await F6(X))await k6(X);await BJ(z,q,J,O)}async function jJ(q,J,O){if(!O.filter)return!0;return O.filter(q,J)}async function BJ(q,J,O,y){const K=await(y.dereference?v.stat:v.lstat)(J);if(K.isDirectory())return m6(K,q,J,O,y);if(K.isFile()||K.isCharacterDevice()||K.isBlockDevice())return v6(K,q,J,O,y);if(K.isSymbolicLink())return b6(q,J,O,y);if(K.isSocket())throw new Error(`Cannot copy a socket file: ${J}`);if(K.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${J}`);throw new Error(`Unknown file: ${J}`)}async function v6(q,J,O,y,z){if(!J)return wJ(q,O,y,z);if(z.overwrite)return await v.unlink(y),wJ(q,O,y,z);if(z.errorOnExist)throw new Error(`'${y}' already exists`)}async function wJ(q,J,O,y){if(await v.copyFile(J,O),y.preserveTimestamps){if(S6(q.mode))await n6(O,q.mode);const z=await v.stat(J);await $6(O,z.atime,z.mtime)}return v.chmod(O,q.mode)}var S6=function(q){return(q&128)===0},n6=function(q,J){return v.chmod(q,J|128)};async function m6(q,J,O,y,z){if(!J)await v.mkdir(y);const K=await v.readdir(O);if(await Promise.all(K.map(async(X)=>{const V=Vq.join(O,X),B=Vq.join(y,X);if(!await jJ(V,B,z))return;const{destStat:Z}=await Uq.checkPaths(V,B,"copy",z);return BJ(Z,V,B,z)})),!J)await v.chmod(y,q.mode)}async function b6(q,J,O,y){let z=await v.readlink(J);if(y.dereference)z=Vq.resolve(process.cwd(),z);if(!q)return v.symlink(z,O);let K=null;try{K=await v.readlink(O)}catch(X){if(X.code==="EINVAL"||X.code==="UNKNOWN")return v.symlink(z,O);throw X}if(y.dereference)K=Vq.resolve(process.cwd(),K);if(Uq.isSrcSubdir(z,K))throw new Error(`Cannot copy '${z}' to a subdirectory of itself, '${K}'.`);if(Uq.isSrcSubdir(K,z))throw new Error(`Cannot overwrite '${K}' with '${z}'.`);return await v.unlink(O),v.symlink(z,O)}var v=m(),Vq=import.meta.require("path"),{mkdirs:k6}=p(),{pathExists:F6}=a(),{utimesMillis:$6}=Sq(),Uq=s();CJ.exports=u6});var NJ=_((ky,xJ)=>{var i6=function(q,J,O){if(typeof O==="function")O={filter:O};if(O=O||{},O.clobber="clobber"in O?!!O.clobber:!0,O.overwrite="overwrite"in O?!!O.overwrite:O.clobber,O.preserveTimestamps&&process.arch==="ia32")process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");const{srcStat:y,destStat:z}=Gq.checkPathsSync(q,J,"copy",O);if(Gq.checkParentPathsSync(q,y,J,"copy"),O.filter&&!O.filter(q,J))return;const K=Yq.dirname(J);if(!b.existsSync(K))g6(K);return QJ(z,q,J,O)},QJ=function(q,J,O,y){const K=(y.dereference?b.statSync:b.lstatSync)(J);if(K.isDirectory())return a6(K,q,J,O,y);else if(K.isFile()||K.isCharacterDevice()||K.isBlockDevice())return l6(K,q,J,O,y);else if(K.isSymbolicLink())return t6(q,J,O,y);else if(K.isSocket())throw new Error(`Cannot copy a socket file: ${J}`);else if(K.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${J}`);throw new Error(`Unknown file: ${J}`)},l6=function(q,J,O,y,z){if(!J)return PJ(q,O,y,z);return p6(q,O,y,z)},p6=function(q,J,O,y){if(y.overwrite)return b.unlinkSync(O),PJ(q,J,O,y);else if(y.errorOnExist)throw new Error(`'${O}' already exists`)},PJ=function(q,J,O,y){if(b.copyFileSync(J,O),y.preserveTimestamps)c6(q.mode,J,O);return mq(O,q.mode)},c6=function(q,J,O){if(f6(q))d6(O,q);return o6(J,O)},f6=function(q){return(q&128)===0},d6=function(q,J){return mq(q,J|128)},mq=function(q,J){return b.chmodSync(q,J)},o6=function(q,J){const O=b.statSync(q);return h6(J,O.atime,O.mtime)},a6=function(q,J,O,y,z){if(!J)return r6(q.mode,O,y,z);return WJ(O,y,z)},r6=function(q,J,O,y){return b.mkdirSync(O),WJ(J,O,y),mq(O,q)},WJ=function(q,J,O){b.readdirSync(q).forEach((y)=>e6(y,q,J,O))},e6=function(q,J,O,y){const z=Yq.join(J,q),K=Yq.join(O,q);if(y.filter&&!y.filter(z,K))return;const{destStat:X}=Gq.checkPathsSync(z,K,"copy",y);return QJ(X,z,K,y)},t6=function(q,J,O,y){let z=b.readlinkSync(J);if(y.dereference)z=Yq.resolve(process.cwd(),z);if(!q)return b.symlinkSync(z,O);else{let K;try{K=b.readlinkSync(O)}catch(X){if(X.code==="EINVAL"||X.code==="UNKNOWN")return b.symlinkSync(z,O);throw X}if(y.dereference)K=Yq.resolve(process.cwd(),K);if(Gq.isSrcSubdir(z,K))throw new Error(`Cannot copy '${z}' to a subdirectory of itself, '${K}'.`);if(Gq.isSrcSubdir(K,z))throw new Error(`Cannot overwrite '${K}' with '${z}'.`);return s6(z,O)}},s6=function(q,J){return b.unlinkSync(J),b.symlinkSync(q,J)},b=Jq(),Yq=import.meta.require("path"),g6=p().mkdirsSync,h6=Sq().utimesMillisSync,Gq=s();xJ.exports=i6});var Dq=_((Fy,RJ)=>{var qO=M().fromPromise;RJ.exports={copy:qO(DJ()),copySync:NJ()}});var Eq=_(($y,MJ)=>{var OO=function(q,J){IJ.rm(q,{recursive:!0,force:!0},J)},yO=function(q){IJ.rmSync(q,{recursive:!0,force:!0})},IJ=Jq(),JO=M().fromCallback;MJ.exports={remove:JO(OO),removeSync:yO}});var nJ=_((uy,SJ)=>{var kJ=function(q){let J;try{J=FJ.readdirSync(q)}catch{return uJ.mkdirsSync(q)}J.forEach((O)=>{O=$J.join(q,O),vJ.removeSync(O)})},zO=M().fromPromise,FJ=m(),$J=import.meta.require("path"),uJ=p(),vJ=Eq(),TJ=zO(async function q(J){let O;try{O=await FJ.readdir(J)}catch{return uJ.mkdirs(J)}return Promise.all(O.map((y)=>vJ.remove($J.join(J,y))))});SJ.exports={emptyDirSync:kJ,emptydirSync:kJ,emptyDir:TJ,emptydir:TJ}});var hJ=_((vy,gJ)=>{async function XO(q){let J;try{J=await d.stat(q)}catch{}if(J&&J.isFile())return;const O=mJ.dirname(q);let y=null;try{y=await d.stat(O)}catch(z){if(z.code==="ENOENT"){await bJ.mkdirs(O),await d.writeFile(q,"");return}else throw z}if(y.isDirectory())await d.writeFile(q,"");else await d.readdir(O)}var ZO=function(q){let J;try{J=d.statSync(q)}catch{}if(J&&J.isFile())return;const O=mJ.dirname(q);try{if(!d.statSync(O).isDirectory())d.readdirSync(O)}catch(y){if(y&&y.code==="ENOENT")bJ.mkdirsSync(O);else throw y}d.writeFileSync(q,"")},KO=M().fromPromise,mJ=import.meta.require("path"),d=m(),bJ=p();gJ.exports={createFile:KO(XO),createFileSync:ZO}});var fJ=_((Sy,cJ)=>{async function UO(q,J){let O;try{O=await r.lstat(J)}catch{}let y;try{y=await r.lstat(q)}catch(X){throw X.message=X.message.replace("lstat","ensureLink"),X}if(O&&pJ(y,O))return;const z=iJ.dirname(J);if(!await VO(z))await lJ.mkdirs(z);await r.link(q,J)}var YO=function(q,J){let O;try{O=r.lstatSync(J)}catch{}try{const K=r.lstatSync(q);if(O&&pJ(K,O))return}catch(K){throw K.message=K.message.replace("lstat","ensureLink"),K}const y=iJ.dirname(J);if(r.existsSync(y))return r.linkSync(q,J);return lJ.mkdirsSync(y),r.linkSync(q,J)},HO=M().fromPromise,iJ=import.meta.require("path"),r=m(),lJ=p(),{pathExists:VO}=a(),{areIdentical:pJ}=s();cJ.exports={createLink:HO(UO),createLinkSync:YO}});var oJ=_((ny,dJ)=>{async function _O(q,J){if(e.isAbsolute(q)){try{await _q.lstat(q)}catch(K){throw K.message=K.message.replace("lstat","ensureSymlink"),K}return{toCwd:q,toDst:q}}const O=e.dirname(J),y=e.join(O,q);if(await GO(y))return{toCwd:y,toDst:q};try{await _q.lstat(q)}catch(K){throw K.message=K.message.replace("lstat","ensureSymlink"),K}return{toCwd:q,toDst:e.relative(O,q)}}var AO=function(q,J){if(e.isAbsolute(q)){if(!_q.existsSync(q))throw new Error("absolute srcpath does not exist");return{toCwd:q,toDst:q}}const O=e.dirname(J),y=e.join(O,q);if(_q.existsSync(y))return{toCwd:y,toDst:q};if(!_q.existsSync(q))throw new Error("relative srcpath does not exist");return{toCwd:q,toDst:e.relative(O,q)}},e=import.meta.require("path"),_q=m(),{pathExists:GO}=a(),EO=M().fromPromise;dJ.exports={symlinkPaths:EO(_O),symlinkPathsSync:AO}});var eJ=_((my,rJ)=>{async function wO(q,J){if(J)return J;let O;try{O=await aJ.lstat(q)}catch{return"file"}return O&&O.isDirectory()?"dir":"file"}var jO=function(q,J){if(J)return J;let O;try{O=aJ.lstatSync(q)}catch{return"file"}return O&&O.isDirectory()?"dir":"file"},aJ=m(),LO=M().fromPromise;rJ.exports={symlinkType:LO(wO),symlinkTypeSync:jO}});var J0=_((by,q0)=>{async function RO(q,J,O){let y;try{y=await f.lstat(J)}catch{}if(y&&y.isSymbolicLink()){const[V,B]=await Promise.all([f.stat(q),f.stat(J)]);if(sJ(V,B))return}const z=await QO(q,J);q=z.toDst;const K=await WO(z.toCwd,O),X=tJ.dirname(J);if(!await NO(X))await CO(X);return f.symlink(q,J,K)}var IO=function(q,J,O){let y;try{y=f.lstatSync(J)}catch{}if(y&&y.isSymbolicLink()){const V=f.statSync(q),B=f.statSync(J);if(sJ(V,B))return}const z=PO(q,J);q=z.toDst,O=xO(z.toCwd,O);const K=tJ.dirname(J);if(f.existsSync(K))return f.symlinkSync(q,J,O);return DO(K),f.symlinkSync(q,J,O)},BO=M().fromPromise,tJ=import.meta.require("path"),f=m(),{mkdirs:CO,mkdirsSync:DO}=p(),{symlinkPaths:QO,symlinkPathsSync:PO}=oJ(),{symlinkType:WO,symlinkTypeSync:xO}=eJ(),{pathExists:NO}=a(),{areIdentical:sJ}=s();q0.exports={createSymlink:BO(RO),createSymlinkSync:IO}});var V0=_((gy,H0)=>{var{createFile:O0,createFileSync:y0}=hJ(),{createLink:z0,createLinkSync:K0}=fJ(),{createSymlink:X0,createSymlinkSync:Z0}=J0();H0.exports={createFile:O0,createFileSync:y0,ensureFile:O0,ensureFileSync:y0,createLink:z0,createLinkSync:K0,ensureLink:z0,ensureLinkSync:K0,createSymlink:X0,createSymlinkSync:Z0,ensureSymlink:X0,ensureSymlinkSync:Z0}});var Qq=_((hy,U0)=>{var MO=function(q,{EOL:J="\n",finalEOL:O=!0,replacer:y=null,spaces:z}={}){const K=O?J:"";return JSON.stringify(q,y,z).replace(/\n/g,J)+K},TO=function(q){if(Buffer.isBuffer(q))q=q.toString("utf8");return q.replace(/^\uFEFF/,"")};U0.exports={stringify:MO,stripBom:TO}});var _0=_((iy,E0)=>{async function kO(q,J={}){if(typeof J==="string")J={encoding:J};const O=J.fs||zq,y="throws"in J?J.throws:!0;let z=await Pq.fromCallback(O.readFile)(q,J);z=G0(z);let K;try{K=JSON.parse(z,J?J.reviver:null)}catch(X){if(y)throw X.message=`${q}: ${X.message}`,X;else return null}return K}var $O=function(q,J={}){if(typeof J==="string")J={encoding:J};const O=J.fs||zq,y="throws"in J?J.throws:!0;try{let z=O.readFileSync(q,J);return z=G0(z),JSON.parse(z,J.reviver)}catch(z){if(y)throw z.message=`${q}: ${z.message}`,z;else return null}};async function uO(q,J,O={}){const y=O.fs||zq,z=Y0(J,O);await Pq.fromCallback(y.writeFile)(q,z,O)}var SO=function(q,J,O={}){const y=O.fs||zq,z=Y0(J,O);return y.writeFileSync(q,z,O)},zq;try{zq=Jq()}catch(q){zq=import.meta.require("fs")}var Pq=M(),{stringify:Y0,stripBom:G0}=Qq(),FO=Pq.fromPromise(kO),vO=Pq.fromPromise(uO),nO={readFile:FO,readFileSync:$O,writeFile:vO,writeFileSync:SO};E0.exports=nO});var L0=_((ly,A0)=>{var Wq=_0();A0.exports={readJson:Wq.readFile,readJsonSync:Wq.readFileSync,writeJson:Wq.writeFile,writeJsonSync:Wq.writeFileSync}});var xq=_((py,B0)=>{async function gO(q,J,O="utf-8"){const y=w0.dirname(q);if(!await bO(y))await j0.mkdirs(y);return bq.writeFile(q,J,O)}var hO=function(q,...J){const O=w0.dirname(q);if(!bq.existsSync(O))j0.mkdirsSync(O);bq.writeFileSync(q,...J)},mO=M().fromPromise,bq=m(),w0=import.meta.require("path"),j0=p(),bO=a().pathExists;B0.exports={outputFile:mO(gO),outputFileSync:hO}});var D0=_((cy,C0)=>{async function pO(q,J,O={}){const y=iO(J,O);await lO(q,y,O)}var{stringify:iO}=Qq(),{outputFile:lO}=xq();C0.exports=pO});var P0=_((fy,Q0)=>{var dO=function(q,J,O){const y=cO(J,O);fO(q,y,O)},{stringify:cO}=Qq(),{outputFileSync:fO}=xq();Q0.exports=dO});var x0=_((dy,W0)=>{var oO=M().fromPromise,g=L0();g.outputJson=oO(D0());g.outputJsonSync=P0();g.outputJSON=g.outputJson;g.outputJSONSync=g.outputJsonSync;g.writeJSON=g.writeJson;g.writeJSONSync=g.writeJsonSync;g.readJSON=g.readJson;g.readJSONSync=g.readJsonSync;W0.exports=g});var T0=_((oy,M0)=>{async function sO(q,J,O={}){const y=O.overwrite||O.clobber||!1,{srcStat:z,isChangingCase:K=!1}=await R0.checkPaths(q,J,"move",O);await R0.checkParentPaths(q,z,J,"move");const X=N0.dirname(J);if(N0.parse(X).root!==X)await eO(X);return qy(q,J,y,K)}async function qy(q,J,O,y){if(!y){if(O)await I0(J);else if(await tO(J))throw new Error("dest already exists.")}try{await aO.rename(q,J)}catch(z){if(z.code!=="EXDEV")throw z;await Jy(q,J,O)}}async function Jy(q,J,O){return await rO(q,J,{overwrite:O,errorOnExist:!0,preserveTimestamps:!0}),I0(q)}var aO=m(),N0=import.meta.require("path"),{copy:rO}=Dq(),{remove:I0}=Eq(),{mkdirp:eO}=p(),{pathExists:tO}=a(),R0=s();M0.exports=sO});var v0=_((ay,u0)=>{var zy=function(q,J,O){O=O||{};const y=O.overwrite||O.clobber||!1,{srcStat:z,isChangingCase:K=!1}=k0.checkPathsSync(q,J,"move",O);if(k0.checkParentPathsSync(q,z,J,"move"),!Ky(J))yy(hq.dirname(J));return Xy(q,J,y,K)},Ky=function(q){const J=hq.dirname(q);return hq.parse(J).root===J},Xy=function(q,J,O,y){if(y)return gq(q,J,O);if(O)return $0(J),gq(q,J,O);if(F0.existsSync(J))throw new Error("dest already exists.");return gq(q,J,O)},gq=function(q,J,O){try{F0.renameSync(q,J)}catch(y){if(y.code!=="EXDEV")throw y;return Zy(q,J,O)}},Zy=function(q,J,O){return Oy(q,J,{overwrite:O,errorOnExist:!0,preserveTimestamps:!0}),$0(q)},F0=Jq(),hq=import.meta.require("path"),Oy=Dq().copySync,$0=Eq().removeSync,yy=p().mkdirpSync,k0=s();u0.exports=zy});var n0=_((ry,S0)=>{var Hy=M().fromPromise;S0.exports={move:Hy(T0()),moveSync:v0()}});var b0=_((ey,m0)=>{m0.exports={...m(),...Dq(),...nJ(),...V0(),...x0(),...p(),...n0(),...xq(),...a(),...Eq()}});var l=d0(b0(),1);import c from"path";var Vy=function(q){return q&&typeof q.status==="number"};function Uy(q){return q!==void 0&&q!==null}async function Nq(q,J=[]){try{const O=Bun.spawnSync([q,...J.filter(Uy)],{stdio:["inherit","ignore","inherit"],env:process.env});if(O.exitCode!==0){if(!Nq.silent)console.error(`Error: ${q} ${J.join(" ")} failed with code: ${O.exitCode}`),console.error(new Error().stack);return!1}}catch(O){if(!Nq.silent){if(Vy(O))console.error(`Error: ${q} ${J.join(" ")} failed with code: ${O.status}`);else if(O instanceof Error)console.error(O.message);console.error(new Error().stack)}return!1}return!0}Nq.silent=!0;var Kq=Nq;import{URL as Ey,fileURLToPath as _y} from"url";var Yy=function(q){return q&&typeof q.status==="number"};function Gy(q){return q!==void 0&&q!==null}async function Aq(q,J=[]){try{Aq.lastError="";const O=Bun.spawnSync([q,...J.filter(Gy)],{stdio:["inherit","pipe","pipe"],env:process.env});if(O.exitCode!==0)return console.error(`Error: ${q} ${J.join(" ")} failed with code: ${O.exitCode}`),console.error("Error Buffer:\n",O.stderr.toString()),console.error(new Error().stack),Aq.lastError=O.stderr.toString(),null;return(O.stdout||"").toString()}catch(O){if(Yy(O))console.error(`Error: ${q} ${J.join(" ")} failed with code: ${O.status}`);else if(O instanceof Error)Aq.lastError=O.message,console.error(O.message);return console.error(new Error().stack),null}}Aq.lastError="";var Xq=Aq;var g0=function(q){return q?.charAt},h=function(...q){l.default.appendFileSync(iq,`\n${q.join(" ")}`,{encoding:"utf-8"}),console.warn(...q)};async function Ay(){if(!l.default.existsSync(iq))l.default.ensureFileSync(iq),await new Promise((X)=>setTimeout(X,100));const J=l.default.readJsonSync(c.resolve("package.json")).fallbackDependencies,O=await Kq("bun",["-v"]),y=!O?await Kq("yarn",["-v"]):!1,z=!O&&!y?await Kq("npm",["-v"]):!1;if(!O&&!z&&!y){h("No appropriate package manager detected for executing fallbackDependencies. Please ensure yarn, bun, or npm is available.");return}if(!l.default.existsSync(c.resolve("bunfig.toml")))l.default.copySync(c.join(h0,"bunfig.toml"),c.resolve("bunfig.toml"));const K=async(X)=>{if(g0(X))X=[X];if(O){let V=Boolean(await Xq("bun",["add","--no-save","--ignore-scripts",...X]));if(Xq.lastError.includes("no commit matching")&&Xq.lastError.includes("but repository exists"))await Xq("bun",["pm","cache","rm"]),V=Boolean(await Xq("bun",["add","--no-save","--ignore-scripts",...X]));if(!V)h(`Failed to install dependency with bun: ${X}`);return V}else if(y)return await Kq("yarn",["add","--no-save","--ignore-scripts",...X]);else if(z)return await Kq("npm",["install","--no-save","--ignore-scripts",...X])};h("POST INSTALL: fallback-dependencies"),h("Fallbacks:"),h(JSON.stringify(J,null,2));for(let[X,V]of Object.entries(J)){if(h("Installing dependencies with fallbacks for:",X),!Array.isArray(V)){h("Invalid fallbacks for:",X,"Expected an array but got:",JSON.stringify(V));continue}let B=!1;for(let U of V){if(!g0(U)){h("Invalid repo for:",X,"Expected a string but got:",U);continue}if(await K(U)){h("Installed:",U),B=!0;break}else h("Installation failed for:",U),h("Attempting fallback...")}if(!B){h("No fallback dependency worked for:",X);continue}const N=c.resolve("node_modules");if(!l.default.existsSync(c.join(N,X))){h(`A fallback dependency was installed, however, the key provided "${X}" in the fallback dependency configuration does NOT match the package identifier.\nError: node_modules/${X} was not found.`);continue}const Z=c.join(N,X,"package.json");if(!l.default.existsSync(Z)){h(`A fallback dependency was installed, however, the package.json for "${X}" was not found at: ${Z}.`);continue}const G=l.default.readJsonSync(Z);if(G.bin){const U=c.join(N,".bin");if(!l.default.existsSync(U))l.default.ensureDirSync(U);for(let H of Object.keys(G.bin)){const Y=c.join(U,H),L=c.join(N,X,G.bin[H]);if(!l.default.existsSync(L)){h(`A fallback dependency was installed, however, the bin "${H}" was not found at: ${L}.`);continue}l.default.copySync(L,Y)}}}}var h0=_y(new Ey(".",import.meta.url)),iq=c.join(h0,"post-install.log");Ay();

//# debugId=4B0469C7E23E4DAD64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
